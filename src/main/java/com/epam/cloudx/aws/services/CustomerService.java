package com.epam.cloudx.aws.services;

import com.epam.cloudx.aws.domain.Customer;
import com.epam.cloudx.aws.exceptions.CustomerNotFoundException;
import com.epam.cloudx.aws.exceptions.ValidationException;
import com.epam.cloudx.aws.repositories.CustomerRepository;
import java.util.ArrayList;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final BookNotificationsService bookNotificationsService;

    public Customer getCustomer(String customerId) {
        if(customerRepository.customerExistsById(customerId)) {
            return customerRepository.getCustomer(customerId);
        } else {
            throw new CustomerNotFoundException(customerId);
        }
    }

    public Customer createCustomer(Customer customer) {
        //new UUID was generated by mapper
        validateNewCustomer(customer);

        //subscribe this customer to notifications
        String subscriptionArn = bookNotificationsService.subscribeEmailToBookNotifications(customer.getEmail());
        customer.setSubscriptionArn(subscriptionArn);

        Customer savedCustomer = customerRepository.createOrUpdateCustomer(customer);
        log.info("New customer created: {}", savedCustomer);

        return savedCustomer;
    }

    public void deleteCustomer(String customerId) {
        if(customerRepository.customerExistsById(customerId)) {
            Customer customer = customerRepository.getCustomer(customerId);

            //cancel subscription before delete
            bookNotificationsService.unsubscribeEmailToBookNotifications(customer.getSubscriptionArn());

            customerRepository.deleteCustomer(customerId);
            log.info("Customer with ID was deleted: {}", customerId);
        } else {
            throw new CustomerNotFoundException(customerId);
        }
    }

    private void validateNewCustomer(Customer customer) throws ValidationException {
        var problems = new ArrayList<String>();
        if(StringUtils.isBlank(customer.getName())) {
            problems.add("Customer name must be provided");
        }
        if(StringUtils.isBlank(customer.getEmail())) {
            problems.add("Customer email must be provided");
            //TODO should validate email correct format. Not going to do it.
        }
        //TODO should validate for email address uniqueness
        if(!problems.isEmpty()) {
            throw new ValidationException("New customer is not valid", problems);
        }
    }

}
