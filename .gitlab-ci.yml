stages:
  - prereqs
  - build
  - publish
  - test
  - terraform-plan
  - terraform-deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "web"

variables:
  GRADLE_IMAGE: gradle:jdk11
  AWS_CLI_IMAGE: amazon/aws-cli
  TERRAFORM_IMAGE: hashicorp/terraform
  UBUNTU_IMAGE: ubuntu

.prereqs-job-template:
  stage: prereqs
  image: $AWS_CLI_IMAGE
  rules:
    - if: $MANAGE_PREREQS == "true"
      when: always
    - when: never
  when: manual
  allow_failure: false

.gradle-job-template:
  image: $GRADLE_IMAGE
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x gradlew

.terraform-job-template:
  image: $TERRAFORM_IMAGE
  before_script:
    - cd ./terraform
    - echo Initializing terraform
    - terraform init
      -backend-config=backend.hcl
      -backend-config="region=$AWS_DEFAULT_REGION"
      -backend-config="access_key=$TERRAFORM_AWS_ACCESS_KEY"
      -backend-config="secret_key=$TERRAFORM_AWS_SECRET_KEY"

provision-prereqs: # create all infrastructure that is required FOR CI/CD and terraform to be able to function
  extends: .prereqs-job-template
  script:
    - aws s3api create-bucket --bucket $TERRAFORM_STATE_BUCKET_NAME
    - aws s3api create-bucket --bucket $ARTIFACTS_BUCKET_NAME
    - aws s3api create-bucket --bucket $LAMBDA_SOURCE_BUCKET_NAME

destroy-prereqs: # destroy all prerequisite infrastructure
  extends: .prereqs-job-template
  script:
    - aws s3 rb s3://$TERRAFORM_STATE_BUCKET_NAME --force
    - aws s3 rb s3://$ARTIFACTS_BUCKET_NAME --force
    - aws s3 rb s3://$LAMBDA_SOURCE_BUCKET_NAME --force

build-jar: # package app into runnable JAR
  stage: build
  extends: .gradle-job-template
  script:
   - ./gradlew bootJar
   - echo Packaged app JAR "$APP_NAME".jar
  cache:
    key: $CI_COMMIT_SHORT_SHA
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - build/libs
    expire_in: 1 hour

build-lambdas:
  stage: build
  image: $UBUNTU_IMAGE
  script:
    - sudo apt-get install zip
    - cd lambda
    - echo Zipping manage book icons lambda, found at lambda/$MANAGE_BOOK_ICONS_LAMBDA_SOURCE
    - zip -r "$MANAGE_BOOK_ICONS_LAMBDA_SOURCE".zip $MANAGE_BOOK_ICONS_LAMBDA_SOURCE
    - echo Created zipped source code lambda/"$MANAGE_BOOK_ICONS_LAMBDA_SOURCE".zip
  artifacts:
    paths:
      - lambda/$MANAGE_BOOK_ICONS_LAMBDA_SOURCE.zip
    expire_in: 1 hour

upload-jar: # upload runnable JAR to S3 -> to be downloaded to EC2 instance
  stage: publish
  image: $AWS_CLI_IMAGE
  script:
    - export ARTIFACT_VERSIONED_NAME="$APP_NAME"_"$CI_COMMIT_SHORT_SHA"
    - echo Versioned artifact name based on commit hash is "$ARTIFACT_VERSIONED_NAME"
    - echo Uploading artifact "$APP_NAME".jar as "$ARTIFACT_VERSIONED_NAME".jar to S3 bucket "$ARTIFACTS_BUCKET_NAME"
    - aws s3api put-object --bucket $ARTIFACTS_BUCKET_NAME --key "$ARTIFACT_VERSIONED_NAME".jar --body ./build/libs/"$APP_NAME".jar
    - echo Artifact upload successful
  needs:
    - build-jar
  only:
    - main

upload-lambdas: # upload lambda sources as ZIP to s3 bucket
  stage: publish
  image: $AWS_CLI_IMAGE
  script:
    - echo Zipped source code for manage book icons lambda is expected at lambda/"$MANAGE_BOOK_ICONS_LAMBDA_SOURCE".zip
    - export MANAGE_BOOK_ICONS_VERSIONED_KEY="$MANAGE_BOOK_ICONS_LAMBDA_SOURCE"_"$CI_COMMIT_SHORT_SHA".zip
    - echo Uploading manage book icons lambda source to S3 bucket $LAMBDA_SOURCE_BUCKET_NAME using key $MANAGE_BOOK_ICONS_VERSIONED_KEY
    - aws s3api put-object --bucket $LAMBDA_SOURCE_BUCKET_NAME --key $MANAGE_BOOK_ICONS_VERSIONED_KEY --body ./lambda/"$MANAGE_BOOK_ICONS_LAMBDA_SOURCE".zip
    - echo Lambda source code upload successful
  needs:
    - build-lambdas
  only:
    - main

delete-jar: # cleanup job -> delete JAR from artifacts bucket
  stage: publish
  image: $AWS_CLI_IMAGE
  script:
    - export ARTIFACT_VERSIONED_NAME="$APP_NAME"_"$CI_COMMIT_SHORT_SHA"
    - echo Deleting artifact "$ARTIFACT_VERSIONED_NAME".jar from s3 bucket "$ARTIFACTS_BUCKET_NAME"
    - aws s3 rm s3://"$ARTIFACTS_BUCKET_NAME"/"$ARTIFACT_VERSIONED_NAME".jar
    - echo Artifact successfully removed from S3 bucket "$ARTIFACTS_BUCKET_NAME"
  needs:
    - upload-jar
  only:
    - main
  when: manual
  allow_failure: true

delete-lambdas:
  stage: publish
  image: $AWS_CLI_IMAGE
  script:
    - export MANAGE_BOOK_ICONS_VERSIONED_KEY="$MANAGE_BOOK_ICONS_LAMBDA_SOURCE"_"$CI_COMMIT_SHORT_SHA".zip
    - echo Zipped source code for manage book icons lambda is expected in bucket $LAMBDA_SOURCE_BUCKET_NAME with key $MANAGE_BOOK_ICONS_VERSIONED_KEY
    - aws s3 rm s3://"$LAMBDA_SOURCE_BUCKET_NAME"/"$MANAGE_BOOK_ICONS_VERSIONED_KEY"
    - echo Source code for manage book lambda removed from s3.
  needs:
    - upload-lambdas
  only:
    - main

spotless-check:
  stage: test
  extends: .gradle-job-template
  script:
    - echo "Performing spotless check..."
    - echo "If this check fails, run ./gradlew spotlessApply and commit + push"
    - ./gradlew spotlessCheck
  except:
    variables:
      - $SKIP_SPOTLESS_CHECK
  allow_failure: true

unit-test:
  stage: test
  extends: .gradle-job-template
  script:
    - echo "Running unit tests..."
    - ./gradlew test
  cache:
    key: $CI_COMMIT_SHORT_SHA
    policy: pull
    paths:
      - build
      - .gradle

integration-test:
  stage: test
  extends: .gradle-job-template
  script:
    - echo "Running integration tests..."
    - ./gradlew integrationTest
  cache:
    key: $CI_COMMIT_SHORT_SHA
    policy: pull
    paths:
      - build
      - .gradle

terraform-validate:
  stage: terraform-plan
  extends: .terraform-job-template
  script:
    - echo Validating Terraform configurations
    - terraform validate

terraform-plan:
  stage: terraform-plan
  extends: .terraform-job-template
  script:
    - export ARTIFACT_VERSIONED_NAME="$APP_NAME"_"$CI_COMMIT_SHORT_SHA".jar
    - export MANAGE_BOOK_ICONS_VERSIONED_KEY="$MANAGE_BOOK_ICONS_LAMBDA_SOURCE"_"$CI_COMMIT_SHORT_SHA".zip
    - echo Create Terraform plan...
    - terraform plan -out=tfplan 
      -var-file=inputs.tfvars
      -var my_ip="$MY_IP"
      -var environment="$ENVIRONMENT" 
      -var aws_access_key="$TERRAFORM_AWS_ACCESS_KEY" 
      -var aws_secret_key="$TERRAFORM_AWS_SECRET_KEY" 
      -var aws_account_id="$AWS_ACCOUNT_ID" 
      -var artifacts_bucket_name="$ARTIFACTS_BUCKET_NAME" 
      -var application_artifact_name="$ARTIFACT_VERSIONED_NAME"
      -var lambda_sources_bucket_name="$LAMBDA_SOURCE_BUCKET_NAME"
      -var manage_book_icons_lambda_source_object_key="$MANAGE_BOOK_ICONS_VERSIONED_KEY"
    - echo Plan complete, review carefully!
  artifacts:
    paths:
      - ./terraform/tfplan
    expire_in: 1 hour
  needs:
    - terraform-validate

terraform-apply:
  stage: terraform-deploy
  extends: .terraform-job-template
  script:
    - echo Applying terraform plan to create infrastructure...
    - terraform apply "tfplan"
    - echo Infrastructure created for app $APP_NAME on environment $ENVIRONMENT!
    - echo Do not manually modify resources created by Terraform!
    - echo Resources managed by Terraform are tagged 'managed_by=terraform' where possible.
  artifacts: # export private SSH key as artifact -> can be used to connect to instance
    paths:
      - ./terraform/ssh_keys/sample-app-private-key-rsa.pem
    expire_in: 1 hour
  dependencies:
    - terraform-plan
  when: manual
  only:
    - main
  allow_failure: false

terraform-destroy:
  stage: terraform-deploy
  extends: .terraform-job-template
  script:
    - export ARTIFACT_VERSIONED_NAME="$APP_NAME"_"$CI_COMMIT_SHORT_SHA".jar
    - export MANAGE_BOOK_ICONS_VERSIONED_KEY="$MANAGE_BOOK_ICONS_LAMBDA_SOURCE"_"$CI_COMMIT_SHORT_SHA".zip
    - echo Destroying infrastructure...
    - terraform destroy -auto-approve 
      -var-file=inputs.tfvars 
      -var my_ip="$MY_IP"
      -var environment="$ENVIRONMENT" 
      -var aws_access_key="$TERRAFORM_AWS_ACCESS_KEY" 
      -var aws_secret_key="$TERRAFORM_AWS_SECRET_KEY" 
      -var aws_account_id="$AWS_ACCOUNT_ID" 
      -var artifacts_bucket_name="$ARTIFACTS_BUCKET_NAME" 
      -var application_artifact_name="$ARTIFACT_VERSIONED_NAME"
      -var lambda_sources_bucket_name="$LAMBDA_SOURCE_BUCKET_NAME"
      -var manage_book_icons_lambda_source_object_key="$MANAGE_BOOK_ICONS_VERSIONED_KEY"
    - echo Infrastructure was destroyed successfully!
  when: manual
  only:
    - main
  needs:
    - terraform-plan
  dependencies:
    - terraform-plan
  allow_failure: false

